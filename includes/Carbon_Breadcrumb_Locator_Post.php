<?php
/**
 * Post breadcrumb item locator class.
 * 
 * Used to locate the breadcrumb items for post types.
 */
class Carbon_Breadcrumb_Locator_Post extends Carbon_Breadcrumb_Locator {

	/**
	 * Whether this the items of this locator should be included in the trail.
	 *
	 * @access public
	 *
	 * @return bool $is_included Whether the found items should be included.
	 */
	function is_included() {
		return is_singular() && get_post_type() == $this->get_subtype();
	}

	/**
	 * Retrieve the items, found by this locator.
	 *
	 * @access public
	 *
	 * @param int $priority The priority of the located items.
	 * @param int $id The post ID, used to go up the post type tree.
	 * @return array $items The items, found by this locator.
	 */
	function get_items($priority = 1000, $post_id = 0) {
		$items = array();

		// get the current post ID, if not specified
		if (!$post_id) {
			$post_id = get_the_ID();
		}

		// walk the tree of ancestors of the post up to the top
		do {

			$item = Carbon_Breadcrumb_Item::factory($this->get_type(), $priority);
			$item->set_id($post_id);
			$item->set_subtype($this->get_subtype());
			$item->setup();

			$items[] = $item;

			$post_id = get_post_field('post_parent', $post_id);

		} while ($post_id);

		return array_reverse($items);
	}

	/**
	 * Generate a set of breadcrumb items that found by this locator type and any subtype.
	 * Will generate all necessary breadcrumb items of all post types.
	 *
	 * @access public
	 *
	 * @return array $items The items, generated by this locator.
	 */
	function generate_items() {
		$all_items = array();

		$post_types = get_post_types(array(
			'public' => true,
		));
		
		foreach ($post_types as $post_type) {
			$locator = Carbon_Breadcrumb_Locator::factory($this->get_type(), $post_type);
			if ($locator->is_included()) {
				$items = $locator->get_items();
				$all_items = array_merge($all_items, $items);
			}
		}

		return $all_items;
	}
	
}